name: Scrape V2Ray Links

on:
  schedule:
    - cron: '*/20 * * * *'  # Runs every 20 minutes
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Determine current file
      id: current_file
      run: |
        # Check if timestamp file exists
        if [ ! -f .last_switch ]; then
          # If it doesn't exist, create it with the current timestamp and start with file 1
          date +%s > .last_switch
          echo "file=v2tel_links1.txt" >> $GITHUB_ENV
          echo "next_file=v2tel_links2.txt" >> $GITHUB_ENV
        else
          # Calculate the difference in seconds between now and the last switch
          LAST_SWITCH=$(cat .last_switch)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_SWITCH))
          # 7200 seconds = 2 hours
          if [ $TIME_DIFF -ge 7200 ]; then
            # It's been 2 hours, switch files
            if [[ "${{ env.file }}" == "v2tel_links1.txt" || -z "${{ env.file }}" ]]; then
              echo "file=v2tel_links2.txt" >> $GITHUB_ENV
              echo "next_file=v2tel_links1.txt" >> $GITHUB_ENV
            else
              echo "file=v2tel_links1.txt" >> $GITHUB_ENV
              echo "next_file=v2tel_links2.txt" >> $GITHUB_ENV
            fi
            # Update the last switch time
            date +%s > .last_switch
          else
            # Continue with the current file
            if [[ "${{ env.file }}" == "v2tel_links1.txt" || -z "${{ env.file }}" ]]; then
              echo "file=v2tel_links1.txt" >> $GITHUB_ENV
              echo "next_file=v2tel_links2.txt" >> $GITHUB_ENV
            else
              echo "file=v2tel_links2.txt" >> $GITHUB_ENV
              echo "next_file=v2tel_links1.txt" >> $GITHUB_ENV
            fi
          fi
        fi

        # Save the current file to the .last_file for the next run
        echo "${{ env.file }}" > .last_file

        # Debug: Print the value of the file variable
        echo "Current file set to: ${{ env.file }}"

    - name: Run scraping script for the determined file
      run: |
        echo "Filename from env: ${{ env.file }}"
        if [ -z "${{ env.file }}" ]; then
          echo "Error: Filename is empty."
          exit 1
        fi
        echo "Running script for file: ${{ env.file }}"
        python main.py ${{ env.file }}

    - name: Clear the previous file after switching
      if: ${{ env.file }} != ${{ env.next_file }}
      run: |
        echo "Clearing the previous file: ${{ env.next_file }}"
        echo "" > ${{ env.next_file }}

    - name: Commit and push changes
      env:
        PROV2: ${{ secrets.PROV2 }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Add all relevant files to the commit
        git add ${{ env.file }} last_150.txt base64_150.txt .last_switch .last_file
        
        # Check if there are any changes to commit
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit."
        else
          # Generate a detailed commit message
          COMMIT_MESSAGE="Update V2Ray links in ${{ env.file }} and last_150.txt"
          if [ -s base64_150.txt ]; then
            COMMIT_MESSAGE="$COMMIT_MESSAGE, encoded last_150.txt to base64_150.txt"
          fi
          git commit -m "$COMMIT_MESSAGE"
          git push https://x-access-token:${PROV2}@github.com/${{ github.repository }}.git HEAD:main
        fi
